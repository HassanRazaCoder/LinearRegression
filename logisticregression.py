# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L2UldF4gdqfM5QGbwz5TtWGS46hOiSTr
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Step 1: Load the dataset
df = pd.read_csv("/content/Thyroid_Diff.csv")

print("Columns:", df.columns)

print("Target column unique values:\n", df.iloc[:, -1].unique())

df = df.rename(columns={df.columns[-1]: "Target"})

df['Target'] = df['Target'].map({'Yes': 1, 'No': 0})

X = df.drop("Target", axis=1)
y = df["Target"]

X = pd.get_dummies(X, drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Step 10: Output first few predictions
print("Predictions:", y_pred[:5])

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np
import matplotlib.pyplot as plt

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"ðŸ”¢ Mean Squared Error (MSE): {mse:.4f}")
print(f"ðŸ“‰ Root Mean Squared Error (RMSE): {rmse:.4f}")
print(f"ðŸ“Š Mean Absolute Error (MAE): {mae:.4f}")
print(f"ðŸ“ˆ RÂ² Score: {r2:.4f}")

# Plot actual vs predicted
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([0, 1], [0, 1], '--', color='red')  # Line for perfect prediction
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted Values")
plt.grid(True)
plt.show()